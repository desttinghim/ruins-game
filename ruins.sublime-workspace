{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"player",
				"playerCol"
			],
			[
				"colli",
				"collideables"
			],
			[
				"col",
				"collideables"
			],
			[
				"sepe",
				"separate_crate"
			],
			[
				"se",
				"separate_crate"
			],
			[
				"ground",
				"ground_player"
			],
			[
				"Co",
				"CollisionData	CollisionData"
			],
			[
				"draw",
				"drawPolygon	function"
			],
			[
				"coll",
				"collide_color"
			],
			[
				"separa",
				"separate_player"
			],
			[
				"disable",
				"disableLeft"
			],
			[
				"la",
				"layout_toRightOf"
			],
			[
				"layout_align",
				"layout_alignParentBottom"
			],
			[
				"layout_ali",
				"layout_alignParentRight"
			],
			[
				"layout_al",
				"layout_alignParentTop"
			],
			[
				"Shap",
				"ShapeDrawerLuxe"
			],
			[
				"Sam",
				"SamplesPerSecond"
			],
			[
				"Soun",
				"SoundOutput"
			],
			[
				"Sound",
				"SoundBuffer"
			],
			[
				"Sample",
				"SamplesPerSecond"
			],
			[
				"Soudn",
				"SoundBuffer"
			],
			[
				"End",
				"EndCycleCount"
			],
			[
				"LastC",
				"LastCycleCount"
			],
			[
				"uint",
				"uint64_t"
			],
			[
				"Byte",
				"BytesPerSample"
			],
			[
				"So",
				"SoundOutput"
			],
			[
				"BytesPe",
				"BytesPerSample"
			],
			[
				"Running",
				"RunningSampleIndex"
			],
			[
				"Runnig",
				"RunningSampleIndex"
			],
			[
				"Region",
				"Region1Size"
			],
			[
				"By",
				"ByteToLock"
			],
			[
				"Buffer",
				"BufferSize"
			],
			[
				"Ton",
				"ToneVolume"
			],
			[
				"Sampe",
				"SampleIndex"
			],
			[
				"Sa",
				"SampleCount"
			],
			[
				"bytes",
				"BytesPerSample"
			],
			[
				"Buff",
				"BufferSize"
			],
			[
				"SDL_Jo",
				"SDL_JoystickGetGUIDString"
			],
			[
				"Joy",
				"JoystickIndex"
			],
			[
				"Controller",
				"ControllerIndex"
			],
			[
				"Control",
				"ControllerIndex"
			],
			[
				"Contro",
				"ControllerIndex"
			],
			[
				"Coo",
				"ControllerIndex"
			],
			[
				"Controlle",
				"ControllerHandles"
			],
			[
				"i",
				"i"
			],
			[
				"SDL_Get",
				"SDL_GetWindowSize"
			],
			[
				"sdl_",
				"sdl_window_dimension"
			],
			[
				"MAP",
				"MAP_ANONYMOUS"
			],
			[
				"Bit",
				"BitmapHeight"
			],
			[
				"Blue",
				"BlueOffset"
			],
			[
				"X",
				"XOffset"
			],
			[
				"Render",
				"RenderWeirdGradient"
			],
			[
				"Re",
				"Renderer"
			],
			[
				"SDL_Render",
				"SDL_RenderCopy"
			],
			[
				"SDL_GetWin",
				"SDL_GetWindowFromID"
			]
		]
	},
	"buffers":
	[
		{
			"file": "project.flow",
			"settings":
			{
				"buffer_size": 184,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Main.hx",
			"settings":
			{
				"buffer_size": 6223,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Ruins.hx",
			"settings":
			{
				"buffer_size": 1057,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n/*\n* I'll probably use this add physics to objects in the game\n* But not right now\n*/\n\nimport luxe.Component;\nimport luxe.Vector;\n\nimport luxe.collision.Collision;\nimport luxe.collision.CollisionData;\nimport luxe.collision.shapes.Polygon;\nimport luxe.collision.shapes.Circle;\nimport luxe.collision.shapes.Shape;\n\nclass Physics extends Component\n{\n	var shape : Shape;\n	var movement_vector : Vector;\n	var gravity_vector : Vector;\n	var gravity : Bool = false;\n	var kinetic : Bool = false;\n	var collides : Bool = false;\n\n	public function new( kinetic:Bool, collides:Bool, ?gravity:Vector)\n	{\n		// I don't know if I'll use this\n		gravity_vector = gravity;\n		this.kinetic = kinetic;\n		this.collides = collides;\n	}\n\n	override function init()\n	{\n\n	}\n\n	override function update()\n	{\n\n	}\n\n	public function setShape( shape:Shape )\n	{\n		this.shape = shape;\n	}\n\n	public function setGravityVector( g:Vector )\n	{\n		gravity_vector = g;\n	}\n\n	public function setGravity( g:Bool )\n	{\n		gravity = g;\n	}\n\n}",
			"file": "src/Physics.hx",
			"file_size": 995,
			"file_write_time": 130681518527673954,
			"settings":
			{
				"buffer_size": 986,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 117.0,
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Package Inst",
				"Package Control: Install Package"
			],
			[
				"Package",
				"Package Control: Install Package"
			],
			[
				"Package Control",
				"Package Control: Add Repository"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2deb499853c4371624f5a07e27c334aa' + 'bf8c4e67d14fb0525ba4f89698a6d7e1'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/desttinghim/GameDev/ruins-game",
		"/home/desttinghim/GameDev/ruins-game/src"
	],
	"file_history":
	[
		"/home/desttinghim/GameDev/ruins/src/Physics.hx",
		"/home/desttinghim/GameDev/ruins/src/Ruins.hx",
		"/home/desttinghim/GameDev/ruins/src/Ruins",
		"/usr/lib/haxe/extra/haxelib_src/src/tools/haxelib/Main.hx",
		"/home/desttinghim/hello.neko",
		"/home/desttinghim/Programming/fishtank/src/dimnstudios/fishtank/android/MainView.hx",
		"/home/desttinghim/GameDev/ruins/project.flow",
		"/home/desttinghim/Programming/fishtank/build.basis",
		"/home/desttinghim/Programming/fishtank/res/values/strings.xml",
		"/home/desttinghim/Programming/fishtank/res/layout/listItemView.xml",
		"/home/desttinghim/Programming/fishtank/res/layout/main.xml",
		"/home/desttinghim/Programming/fishtank/haxe/res/values/strings.xml",
		"/home/desttinghim/Programming/fishtank/haxe/res/layout/main.xml",
		"/home/desttinghim/Programming/fishtank/haxe/src/dimnstudios/fishtank/android/MainView.hx",
		"/home/desttinghim/Programming/fishtank/haxe/src/dimnstudios/fishtank/android/ApplicationMain.hx",
		"/home/desttinghim/Programming/fishtank/haxe/build.basis",
		"/home/desttinghim/Programming/fishtank/haxe/src/dimnstudios/fishtank/android/AndroidServices.hx",
		"/home/desttinghim/GameDev/ruins/src/Main.hx",
		"/home/desttinghim/GameDev/ruins/src/Collide.hx",
		"/opt/haxelib/luxe/git/samples/alphas/1_0_parrott/src/Parrott.hx",
		"/opt/haxelib/luxe/git/samples/alphas/1_0_parrott/src/PA",
		"/opt/haxelib/luxe/git/samples/alphas/1_0_parrott/src/Main.hx",
		"/home/desttinghim/Documents/networking_adventure/haxe/build.hxml",
		"/home/desttinghim/Documents/networking_adventure/haxe/Client.hx",
		"/home/desttinghim/Documents/networking_adventure/haxe/Server.hx",
		"/home/desttinghim/Documents/haxe/build.hxml",
		"/home/desttinghim/Documents/haxe/Main.hx",
		"/home/desttinghim/Documents/networking_adventure/testclient.c",
		"/home/desttinghim/Documents/networking_adventure/testserver.c",
		"/home/desttinghim/Documents/networking_adventure/test.c",
		"/home/desttinghim/Documents/rov/gamepad.cpp",
		"/home/desttinghim/Documents/handmade/code/build.sh",
		"/home/desttinghim/Documents/handmade/code/handmade.h",
		"/home/desttinghim/Documents/handmade/code/handmade.cpp",
		"/home/desttinghim/Documents/handmade/code/linux_handmade.cpp",
		"/home/desttinghim/Documents/fishtank/README.md",
		"/home/desttinghim/Documents/mirrors_and_lenses.cpp",
		"/home/desttinghim/Documents/solar_system_simulation.cpp",
		"/home/desttinghim/Documents/handmade/code/gamecontrollerdb.txt",
		"/home/desttinghim/Documents/handmade/code/win32_handmade.cpp",
		"/home/desttinghim/Documents/handmade/code/linux_handmade.cpp~"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"platofrm",
			"loop",
			"rectangle",
			"component",
			"SDLOpenGameControllers",
			"OpenGameControllers",
			"Pitch",
			"TextureWidth",
			"Pixels",
			"SdlTexture"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"BitmapWidth",
			"BitmapMemory",
			"Texture"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "project.flow",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 184,
						"regions":
						{
						},
						"selection":
						[
							[
								182,
								182
							]
						],
						"settings":
						{
							"syntax": "Packages/sublime_flow/flow-file.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/Main.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6223,
						"regions":
						{
						},
						"selection":
						[
							[
								4681,
								4681
							]
						],
						"settings":
						{
							"syntax": "Packages/sublime_haxe_completion/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 315.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/Ruins.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1057,
						"regions":
						{
						},
						"selection":
						[
							[
								901,
								901
							]
						],
						"settings":
						{
							"syntax": "Packages/sublime_haxe_completion/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 90.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/Physics.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 986,
						"regions":
						{
						},
						"selection":
						[
							[
								569,
								569
							]
						],
						"settings":
						{
							"syntax": "Packages/sublime_haxe_completion/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 315.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "ruins.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"~/Programming/fishtank/fishtank.sublime-project"
			],
			[
				"fis",
				"~/Programming/fishtank/fishtank.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 224.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
